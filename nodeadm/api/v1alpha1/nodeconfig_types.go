package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func init() {
	SchemeBuilder.Register(&NodeConfig{}, &NodeConfigList{})
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Cluster
// +kubebuilder:storageversion

// NodeConfig is the Schema for the nodeconfigs API
type NodeConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodeConfigSpec `json:"spec,omitempty"`
}

// +kubebuilder:object:root=true

// NodeConfigList contains a list of NodeConfig
type NodeConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NodeConfig `json:"items"`
}

type NodeConfigSpec struct {
	Cluster      ClusterDetails  `json:"cluster,omitempty"`
	Kubelet      KubeletOptions  `json:"kubelet,omitempty"`
	FeatureGates map[string]bool `json:"featureGates,omitempty"`
}

type ClusterDetails struct {
	// +kubebuilder:validation:Required
	Name string `json:"name,omitempty"`
	// +kubebuilder:validation:Required
	APIServerEndpoint string `json:"apiServerEndpoint,omitempty"`
	// +kubebuilder:validation:Required
	CertificateAuthority []byte `json:"certificateAuthority,omitempty"`
	// +kubebuilder:validation:Required
	CIDR          string `json:"cidr,omitempty"`
	EnableOutpost *bool  `json:"enableOutpost,omitempty"`
	ID            string `json:"id,omitempty"`
}

type KubeletOptions struct {
	Config KubeletConfiguration `json:"config,omitempty"`
	// Labels is a map of labels to apply to the node when the kubelet
	// registers itself
	Labels map[string]string `json:"labels,omitempty"`
}

// KubeletConfiguration is a subset of upstream KubeletConfiguration types,
// which are used to allow partial configuration of kubelet through the NodeConfig
// https://pkg.go.dev/k8s.io/kubelet/config/v1beta1#KubeletConfiguration
type KubeletConfiguration struct {
	// RegisterWithTaints an array of taints to add to a node object
	// when the kubelet registers itself
	RegisterWithTaints []v1.Taint `json:"registerWithTaints,omitempty"`
	// ClusterDNS is a list of IP addresses for the cluster DNS server.
	// If ClusterDNS is provided, the default value generated by nodeadm using
	// cluster service IP CIDR is ignored
	ClusterDNS []string `json:"clusterDNS,omitempty"`
	// MaxPods is an override for the maximum number of pods that can run
	// on this worker node instance.
	MaxPods *int32 `json:"maxPods,omitempty"`
	// PodsPerCore is an override for the number of pods that can run on a worker node
	// instance based on the number of cpu cores. This value cannot exceed MaxPods, so, if
	// MaxPods is a lower value, that value will be used.
	PodsPerCore *int32 `json:"podsPerCore,omitempty"`
	// SystemReserved contains resources reserved for OS system daemons and kernel memory.
	SystemReserved v1.ResourceList `json:"systemReserved,omitempty"`
	// KubeReserved contains resources reserved for Kubernetes system components.
	KubeReserved v1.ResourceList `json:"kubeReserved,omitempty"`
	// EvictionHard is the map of signal names to quantities that define hard eviction thresholds
	EvictionHard map[string]string `json:"evictionHard,omitempty"`
	// EvictionSoft is the map of signal names to quantities that define soft eviction thresholds
	EvictionSoft map[string]string `json:"evictionSoft,omitempty"`
	// EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal
	EvictionSoftGracePeriod map[string]metav1.Duration `json:"evictionSoftGracePeriod,omitempty"`
	// EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in
	// response to soft eviction thresholds being met.
	EvictionMaxPodGracePeriod *int32 `json:"evictionMaxPodGracePeriod,omitempty"`
	// ImageGCHighThresholdPercent is the percent of disk usage after which image
	// garbage collection is always run. The percent is calculated by dividing this
	// field value by 100, so this field must be between 0 and 100, inclusive.
	// When specified, the value must be greater than ImageGCLowThresholdPercent.
	ImageGCHighThresholdPercent *int32 `json:"imageGCHighThresholdPercent,omitempty"`
	// ImageGCLowThresholdPercent is the percent of disk usage before which image
	// garbage collection is never run. Lowest disk usage to garbage collect to.
	// The percent is calculated by dividing this field value by 100,
	// so the field value must be between 0 and 100, inclusive.
	// When specified, the value must be less than imageGCHighThresholdPercent
	ImageGCLowThresholdPercent *int32 `json:"imageGCLowThresholdPercent,omitempty"`
	// CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.
	CPUCFSQuota *bool `json:"cpuCFSQuota,omitempty"`
}
